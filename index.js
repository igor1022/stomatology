const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');
const axios = require('axios');

// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
const token = '7618410066:AAH3cpsnbczURoe_4EPzN0Zb-gnSPKkdfFE'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

const dbPath = path.join(__dirname, 'database', 'appointments.db');

// –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new sqlite3.Database(dbPath);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
db.run(`
  CREATE TABLE IF NOT EXISTS appointments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    phone TEXT,
    day TEXT,
    time_period TEXT,
    service TEXT
  )
`);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let userState = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª —Ä—É–∫–∏ –≤–Ω–∏–∑
  bot.sendMessage(chatId, 'üëá').then(() => {
    // –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
    const videoPath = path.join(__dirname, 'videos', 'one_video.mp4');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    bot.sendVideo(chatId, fs.createReadStream(videoPath)).then(() => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const welcomeMessage = 
`–ü—Ä–∏–≤—ñ—Ç! üëãüèª 
–Ø ‚Äî —á–∞—Ç-–±–æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—ó –ú–†–Ü–Ø —Ç–∞ —è –¥–æ–ø–æ–º–æ–∂—É –í–∞–º! üòÉ

–®—É–∫–∞—î—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—é –¥–ª—è –≤—Å—ñ—î—ó —Ä–æ–¥–∏–Ω–∏? 
–ú—Ä—ñ—î—Ç–µ –∑–Ω–∞–π—Ç–∏ –Ω–∞–¥—ñ–π–Ω–æ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ —É –ë—Ä–æ–≤–∞—Ä–∞—Ö? 
–í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è –ª—ñ–∫—É–≤–∞—Ç–∏ –∑—É–±–∏?

–¢–æ–¥—ñ —Å–∞–º–µ —á–∞—Å –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º –¥–æ –Ω–∞—à–∏—Ö —Ñ–∞—Ö—ñ–≤—Ü—ñ–≤!`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
      const options = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: '–î–æ—Ä–æ—Å–ª–∏–π', callback_data: 'adult' }],
            [{ text: '–î–∏—Ç–∏–Ω–∞', callback_data: 'child' }],
            [{ text: '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å', callback_data: 'appointment' }]
          ]
        })
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      bot.sendMessage(chatId, welcomeMessage).then(() => {
        bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:', options);
      });
    });
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message.chat.id;

  if (data === 'adult') {
    const adultMessage = 
`–†–∞–¥—ñ, —â–æ –≤–∏ –æ–±—Ä–∞–ª–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—é –ú–†–Ü–Ø üß°

–ù–∞—à—ñ –≤–∏—Å–æ–∫–æ–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å —Ç–∞ –≥–æ—Ç–æ–≤—ñ –∑—Ä–æ–±–∏—Ç–∏ –≤—Å–µ, —â–æ–± –≤–∞—à–µ –ª—ñ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —Å–ø–æ–∫—ñ–π–Ω–æ, –±–µ–∑–±–æ–ª—ñ—Å–Ω–æ —Ç–∞ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É –ø–æ—Å–º—ñ—à–∫—É –º—Ä—ñ—ó.

–û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:`;
    
    const adultOptions = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: '–ü–æ—Å–ª—É–≥–∏', callback_data: 'services' }],
          [{ text: '–õ—ñ–∫–∞—Ä—ñ', callback_data: 'doctors' }],
          [{ text: '–í–∞—Ä—Ç—ñ—Å—Ç—å', callback_data: 'pricing' }],
          [{ text: '–°—Ç–µ—Ä–∏–ª—å–Ω—ñ—Å—Ç—å', callback_data: 'sterility' }],
          [{ text: '–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data: 'main_menu' }]
        ]
      })
    };

    bot.sendMessage(chatId, adultMessage, adultOptions);
  } else if (data === 'services') {
    const servicesMessage = '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–ª—É–≥—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å üëá';
    const servicesOptions = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞', callback_data: 'prophylaxis' }],
          [{ text: '–ù–∞ –≥–æ–ª–æ–≤–Ω—É', callback_data: 'main_menu' }]
        ]
      })
    };
    bot.sendMessage(chatId, servicesMessage, servicesOptions);
  } else if (data === 'prophylaxis') {
    bot.sendMessage(chatId, '–û—á—ñ–∫—É–π—Ç–µ —Å–µ–∫—É–Ω–¥—É, –≤—ñ–¥–∫—Ä–∏–≤–∞—é...').then(() => {
      const imagePath = path.join(__dirname, 'photos', 'Profil_foto.jpg');
      bot.sendPhoto(chatId, fs.createReadStream(imagePath)).then(() => {
        const prophylaxisMessage = 
`–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–≤–æ—Ö –µ—Ç–∞–ø—ñ–≤: —â–æ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Ç–æ–≤–æ—é –ø–æ—Ä–æ–∂–Ω–∏–Ω–æ—é –≤ –¥–æ–º–∞—à–Ω—ñ—Ö —É–º–æ–≤–∞—Ö —Ç–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –º–µ–¥–∏—á–Ω–æ–º—É –æ–≥–ª—è–¥—ñ –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—á–Ω–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ.

–†–µ–≥—É–ª—è—Ä–Ω—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –≥—ñ–≥—ñ—î–Ω–∞ –ø–æ—Ä–æ–∂–Ω–∏–Ω–∏ —Ä–æ—Ç–∞ –¥–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–∞—Ä—ñ—î—Å—É, –∑—É–±–Ω–æ–≥–æ –∫–∞–º–µ–Ω—é, –∑–∞–ø–∞–ª–µ–Ω–Ω—è —è—Å–µ–Ω.

–ó–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫—É –≤–∂–µ –∑–∞—Ä–∞–∑. –ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, –ø–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ —Ö–≤–æ—Ä–æ–±—É –ª–µ–≥—à–µ, –Ω—ñ–∂ —ó—ó –ª—ñ–∫—É–≤–∞—Ç–∏.`;

        const prophylaxisOptions = {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è', callback_data: 'book_appointment' }],
              [{ text: '–û–±—Ä–∞—Ç–∏ –ª—ñ–∫–∞—Ä—è', callback_data: 'choose_doctor' }],
              [{ text: '–ù–∞–∑–∞–¥', callback_data: 'services' }]
            ]
          })
        };
        bot.sendMessage(chatId, prophylaxisMessage, prophylaxisOptions);
      });
    });
  } else if (data === 'book_appointment') {
    bot.sendMessage(chatId, '–û—á—ñ–∫—É–π—Ç–µ —Å–µ–∫—É–Ω–¥—É, –≤—ñ–¥–∫—Ä–∏–≤–∞—é —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å—É...').then(() => {
      const daySelectionMessage = '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–µ–Ω—å –≤ —è–∫–∏–π –≤–∞–º –±—É–ª–æ –± –∑—Ä—É—á–Ω–æ –ø—Ä–∏–π—Ç–∏:';
      const daySelectionOptions = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', callback_data: 'monday' }],
            [{ text: '–í—ñ–≤—Ç–æ—Ä–æ–∫', callback_data: 'tuesday' }],
            [{ text: '–°–µ—Ä–µ–¥–∞', callback_data: 'wednesday' }],
            [{ text: '–ß–µ—Ç–≤–µ—Ä', callback_data: 'thursday' }],
            [{ text: '–ü\'—è—Ç–Ω–∏—Ü—è', callback_data: 'friday' }],
            [{ text: '–°—É–±–æ—Ç–∞', callback_data: 'saturday' }],
            [{ text: '–ù–µ–¥—ñ–ª—è', callback_data: 'sunday' }],
            [{ text: '–ù–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É', callback_data: 'main_menu' }]
          ]
        })
      };
      bot.sendMessage(chatId, daySelectionMessage, daySelectionOptions);
    });
  } else if (['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].includes(data)) {
    userState[chatId] = { day: data }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    const timePeriodMessage = '–û–±–µ—Ä—ñ—Ç—å –≤ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–Ω—è –≤–∞–º –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —á–∞—Å:';
    const timePeriodOptions = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: '–†–∞–Ω–æ–∫ 09:00-12:00', callback_data: 'morning' }],
          [{ text: '–û–±—ñ–¥ 12:00-15:00', callback_data: 'afternoon' }],
          [{ text: '–í–µ—á—ñ—Ä 15:00-18:00', callback_data: 'evening' }],
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'book_appointment' }]
        ]
      })
    };
    bot.sendMessage(chatId, timePeriodMessage, timePeriodOptions);
  } else if (['morning', 'afternoon', 'evening'].includes(data)) {
    userState[chatId].time_period = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    bot.sendMessage(chatId, '–§–æ—Ä–º–∞:');
    bot.sendMessage(chatId, '–í–ø–∏—à—ñ—Ç—å –Ω–∏–∂—á–µ –Ü–º\'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µüëá');
    bot.once('message', (msg) => {
      userState[chatId].name = msg.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
      bot.sendMessage(chatId, '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞–ø–∏—Å, –Ω–æ–º–µ—Ä –ø–∏—Å–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (+38‚Ä¶)\nüëá');
      bot.once('message', (msg) => {
        userState[chatId].phone = msg.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        const confirmationMessage = 
`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏–π–æ–º –¥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—ó –ú–†–Ü–Ø —É—Å–ø—ñ—à–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞!

–Ü–º'—è: ${userState[chatId].name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${userState[chatId].phone}
–î–µ–Ω—å: ${userState[chatId].day}
–ü–µ—Ä—ñ–æ–¥: ${userState[chatId].time_period}`;

        const paymentOptions = {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: '–û–ø–ª–∞—Ç–∏—Ç–∏ 1 –≥—Ä–Ω', callback_data: 'pay_1' }],
              [{ text: '–ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
            ]
          })
        };

        bot.sendMessage(chatId, confirmationMessage, paymentOptions);
      });
    });
  } else if (data === 'pay_1') {
    // –ö–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiqPay –¥–ª—è –æ–ø–ª–∞—Ç—ã 1 –≥—Ä–Ω
    const paymentData = {
      public_key: 'sandbox_i98055514331', // –í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
      private_key: 'sandbox_nOnCnLZjf8v1WgmA3bB2iisYXlWUuGQ4f9ODRUOR', // –í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      amount: 1,
      currency: 'UAH',
      description: '–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–ø–∏—Å –¥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—ó',
      order_id: 'order_' + Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
      result_url: 'https://yourwebsite.com/payment-result' // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
    };

    const signature = crypto.createHmac('sha1', paymentData.private_key)
      .update(JSON.stringify(paymentData))
      .digest('base64');
      
    // –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ API LiqPay
    axios.post('https://sandbox.liqpay.ua/api/3/checkout', {
      ...paymentData,
      signature: signature
    })
    .then(response => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞
      if (response.data.status === 'success') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const { name, phone, day, time_period } = userState[chatId];
        db.run(`INSERT INTO appointments (name, phone, day, time_period, service) VALUES (?, ?, ?, ?, ?)`,
          [name, phone, day, time_period, '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞'], // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞' –≤ —Å—Ç–æ–ª–±–µ—Ü service
          function (err) {
            if (err) {
              console.error(err.message);
            } else {
              const successMessage = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞! ü•≥';
              bot.sendMessage(chatId, successMessage);

              // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
              const channelId = -1002331242905; // ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
              const channelMessage = 
`üìÖ –ù–æ–≤–∞ –∑–∞–ø–∏—Å –¥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—ñ—ó!
üë§ –Ü–º'—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìÜ –î–µ–Ω—å: ${day}
‚è∞ –ü–µ—Ä—ñ–æ–¥: ${time_period}`;
              bot.sendMessage(channelId, channelMessage);
            }
          });
      } else {
        bot.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      }
    })
    .catch(error => {
      console.error('Error during payment process:', error);
      bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    });
  } else if (data === 'main_menu') {
    bot.sendMessage(chatId, '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...');
  }
});
